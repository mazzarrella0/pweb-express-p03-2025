// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

// Enum untuk Role (Wajib)
enum Role {
  CUSTOMER
  ADMIN
}

// User Model
model User {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String   // Hashed Password (bcryptjs)
  name        String
  role        Role     @default(CUSTOMER) // Menggunakan Enum Role
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactions Transaction[]

  @@map("users")
}

// Genre Model
model Genre {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  books       Book[] // Hanya relasi ke Book

  @@map("genres")
}

// Book Model
model Book {
  id          String   @id @default(uuid())
  title       String   @unique // Mencegah duplikasi
  author      String
  stock       Int      @default(0)
  price       Int
  description String?
  
  genreId     String
  genre       Genre    @relation(fields: [genreId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  transactionItems TransactionItem[]

  @@map("books")
}

// Transaction Model
model Transaction {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  totalAmount Int
  status      String    @default("PENDING") // PENDING, COMPLETED, CANCELLED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  items       TransactionItem[]

  @@map("transactions")
}

// TransactionItem Model (Detail Transaksi)
model TransactionItem {
  id            String      @id @default(uuid())
  transactionId String
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  
  bookId        String
  book          Book        @relation(fields: [bookId], references: [id])

  quantity      Int
  priceAtTime   Int         // Harga buku saat transaksi terjadi
  
  createdAt     DateTime    @default(now())

  @@map("transaction_items")
}